@page "/Home"
@using Stripe
@using Stripe.Checkout

@inject NavigationManager NavigationManager




<br>
<br>

<header class="text-gray-500 my-12 text-center">
  <link rel="stylesheet" href="titi.css">



</header>


<di class="meme-ligne">
  <div class="rapper" style="margin-top: 90px; gap-30">
    <div class="table basic">
      <div class="price-section">
        <div class="price-area">
          <div class="inner-area">
            <span class="text">$</span>
            <span class="price">10</span>
          </div>
        </div>
      </div>
      <div class="package-name"></div>
      <ul class="features">
        <li>
          <span class="list-name">Accès complet à toutes les fonctionnalités de la plateforme</span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>
        <li>
          <span class="list-name">Consultation illimitée des annonces publiées par les entreprises.
          </span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>
        <li>
          <span class="list-name">Possibilité de postuler aux annonces intéressantes pour votre activité</span>
          <span class="icon cross"><i class="fas fa-check"></i></span>
        </li>

      </ul>
      <form method="post" @formname="checkout-formA" @onsubmit="CheckoutAsync">
        <AntiforgeryToken />
        <button type="submit"
          class=" btnet border-2 border-yellow-400 bg-white text-yellow-400 w-[50] py-2 rounded-full hover:to-purple-600 transition-all duration-300">
          Pay Now</button>
      </form>

    </div>
    <div class="table premium">
      <div class="ribbon"><span>Recommend</span></div>
      <div class="price-section">
        <div class="price-area">
          <div class="inner-area">
            <span class="text">$</span>
            <span class="price">80</span>
          </div>
        </div>
      </div>
      <div class="package-name"></div>
      <ul class="features">
        <li>
          <span class="list-name">Réduction avantageuse pour un engagement sur une année complète.
          </span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>
        <li>
          <span class="list-name">Consultation illimitée des annonces publiées par les entreprises.
          </span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>
        <li>
          <span class="list-name">Possibilité de postuler aux annonces intéressantes pour votre activité</span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>

      </ul>
      <form method="post" @formname="checkout-formB" @onsubmit="CheckoutAsyncB">
        <AntiforgeryToken />
        <button type="submit"
          class=" btnet border-2 border-yellow-400 bg-white text-yellow-400 w-[50] py-2 rounded-full hover:to-purple-600 transition-all duration-300">
          Pay Now</button>
      </form>

    </div>

    <div class="table ultimate">
      <div class="price-section">
        <div class="price-area">
          <div class="inner-area">
            <span class="text">$</span>
            <span class="price">50</span>
          </div>
        </div>
      </div>
      <div class="package-name"></div>
      <ul class="features">
        <li>
          <span class="list-name">Réduction avantage pour les 5 premiers mois</span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>
        <li>
          <span class="list-name">Consultation illimitée des annonces publiées par les entreprises.</span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>

        <li>
          <span class="list-name">Accès complet à toutes les fonctionnalités de la plateforme</span>
          <span class="icon check"><i class="fas fa-check"></i></span>
        </li>

      </ul>
      <form method="post" @formname="checkout-formC" @onsubmit="CheckoutAsyncC">
        <AntiforgeryToken />
        <button type="submit"
          class=" btnet border-2 border-yellow-400 bg-white text-yellow-400 w-[50] py-2 rounded-full hover:to-purple-600 transition-all duration-300">
          Pay Now</button>
      </form>


    </div>
  </div>

</di>




@code {
  private Product[] _productsInCart = [];
  private Product[] _productsInCartB = [];
  private Product[] _productsInCartC = [];
  protected override void OnInitialized()
  {
    _productsInCart = [
    new Product(1, "Product 1", 10),

];
    _productsInCartB = [
    new Product(1, "Product 1", 80),

];
    _productsInCartC = [
    new Product(1, "Product 1", 50),

];
  }

  private async Task CheckoutAsync()
  {

    var domain = NavigationManager.BaseUri.TrimEnd('/');

    var lineItems = _productsInCart.Select(p =>
    {
      decimal price = p.Price; // Calculate the price
      int unitAmount = (int)(price * 100); // Convert the price to the smallest currency unit

      return new SessionLineItemOptions
        {
          Quantity = 1,

          PriceData = new SessionLineItemPriceDataOptions
          {
            Currency = "usd",
            UnitAmount = unitAmount, // Use the computed value

            ProductData = new SessionLineItemPriceDataProductDataOptions
            {
              Name = p.Name
            }
          }
        };
    }).ToList();

    var options = new SessionCreateOptions
      {
        PaymentMethodTypes = new List<string>
{
"card",
},
        LineItems = lineItems,
        Mode = "payment",
        SuccessUrl =
      $"{domain}/payment-success?session-id={{CHECKOUT_SESSION_ID}}&unit_amount_decimal={lineItems.First().PriceData.UnitAmount}",
        CancelUrl = $"{domain}/payment-cancel",
      };

    var service = new SessionService();

    // Create the session asynchronously
    Session session = await service.CreateAsync(options);

    // Navigate to the session URL
    NavigationManager.NavigateTo(session.Url);

  }
  private async Task CheckoutAsyncB()
  {
    var domain = NavigationManager.BaseUri.TrimEnd('/');

    var lineItems = _productsInCartB.Select(p =>
    {
      decimal price = p.Price; // Calculate the price
      int unitAmount = (int)(price * 100); // Convert the price to the smallest currency unit

      return new SessionLineItemOptions
        {
          Quantity = 1,

          PriceData = new SessionLineItemPriceDataOptions
          {
            Currency = "usd",
            UnitAmount = unitAmount, // Use the computed value

            ProductData = new SessionLineItemPriceDataProductDataOptions
            {
              Name = p.Name
            }
          }
        };
    }).ToList();

    var options = new SessionCreateOptions
      {
        PaymentMethodTypes = new List<string>
{
"card",
},
        LineItems = lineItems,
        Mode = "payment",
        SuccessUrl =
      $"{domain}/payment-success?session-id={{CHECKOUT_SESSION_ID}}&unit_amount_decimal={lineItems.First().PriceData.UnitAmount}",
        CancelUrl = $"{domain}/payment-cancel",
      };

    var service = new SessionService();

    // Create the session asynchronously
    Session session = await service.CreateAsync(options);

    // Navigate to the session URL
    NavigationManager.NavigateTo(session.Url);
  }

  private async Task CheckoutAsyncC()
  {
    var domain = NavigationManager.BaseUri.TrimEnd('/');

    var lineItems = _productsInCartC.Select(p =>
    {
      decimal price = p.Price; // Calculate the price
      int unitAmount = (int)(price * 100); // Convert the price to the smallest currency unit

      return new SessionLineItemOptions
        {
          Quantity = 1,

          PriceData = new SessionLineItemPriceDataOptions
          {
            Currency = "usd",
            UnitAmount = unitAmount, // Use the computed value

            ProductData = new SessionLineItemPriceDataProductDataOptions
            {
              Name = p.Name
            }
          }
        };
    }).ToList();

    var options = new SessionCreateOptions
      {
        PaymentMethodTypes = new List<string>
{
"card",
},
        LineItems = lineItems,
        Mode = "payment",
        SuccessUrl =
      $"{domain}/payment-success?session-id={{CHECKOUT_SESSION_ID}}&unit_amount_decimal={lineItems.First().PriceData.UnitAmount}",
        CancelUrl = $"{domain}/payment-cancel",
      };

    var service = new SessionService();

    // Create the session asynchronously
    Session session = await service.CreateAsync(options);

    // Navigate to the session URL
    NavigationManager.NavigateTo(session.Url);
  }
  class Product
  {
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public Product(int id, string name, decimal price) => (Id, Name, Price) = (id, name, price);
  }
}