@page "/RequestFournisseur"
@inject UserService userService

@inject AoService aoService
@using BlazorApp.Components.Model
@using BlazorApp.Components.Service
@using System.Linq
@inject NavigationManager Navigation
@inject UserService userService
@using System
@inject UserService userService

@inject AdminService adminService
@inject NavigationManager Navigation
@inject MailService mailService

<!DOCTYPE html>

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sidebar With Bootstrap</title>
  <link href="https://cdn.lineicons.com/4.0/lineicons.css" rel="stylesheet" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
  <link rel="stylesheet" href="Add.css">

</head>
@if (userService.IsAuthenticated())
{
  if (userService.GetRoleFromCookie() == "Admin")
  {

    <body>
      <div class="wrapper">
        <aside id="sidebar">
          <SideAdmin />
        </aside>
        <div class="main">
          <nav class="navbar navbar-expand px-4 py-3">
            <form action="#" class="d-none d-sm-inline-block">

            </form>
            <div class="navbar-collapse collapse">
              <ul class="navbar-nav ms-auto">
                <li class="nav-item dropdown">
                  <a href="#" data-bs-toggle="dropdown" class="nav-icon pe-md-0">
                    <img src="/account.png" class="avatar img-fluid" alt="">
                  </a>
                  <div class="dropdown-menu dropdown-menu-end rounded">

                  </div>
                </li>
              </ul>
            </div>
          </nav>
          <main class="content px-3 py-4">
            <div class="container-fluid">
              <div class="mb-3">
                <Entet />
                <div class="row">
                  <div class="col-12">
                    <table class="table table-striped">
                      <thead>
                        <tr class="highlight">

                          <th class=" px-1 py-2"># ID</th>
                          <th class="px-10 py-2">Name</th>
                          <th class="px-10 py-2">Email</th>
                          <th class="px-10 py-2">Phone</th>
                          <th class="px-15 py-2" style="width: 20px;">Demande</th>
                        </tr>

                      </thead>
                      <tbody>
                        @if (fournisseurs != null)
                        {
                          @foreach (var fsr in fournisseurs)
                          {
                            <tr>
                              <td class="border px-1 py-2">@fsr.Id</td>
                              <td class="border px-10 py-2">@fsr.Name</td>
                              <td class="border px-10 py-2">@fsr.EmailId</td>
                              <td class="border px-10 py-2">@fsr.Phone</td>


                              <td class="border px-15 py-3">
                                <div style="display: flex; width: 150px; ">
                                  <EditForm Model="@fsr" OnValidSubmit="() => Accept(fsr)"
                                    FormName="@getformname("acpt",fsr.Id)">
                                    <button type=" submit"
                                      class=" btnet border-2 border-yellow-400 bg-white text-yellow-400 w-[4] py-1 rounded-full hover:to-purple-600 transition-all duration-300"
                                      style="font-size: 13px;">
                                      Accepter</button>
                                  </EditForm>
                                  <EditForm Model="@fsr" OnValidSubmit="() => Refuse(fsr)"
                                    FormName="@getformname("rfs",fsr.Id)">
                                    <button type=" submit"
                                      class=" btnet border-2 border-red-400 bg-white text-red-400 w-[4] py-1 rounded-full hover:to-purple-600 transition-all duration-300"
                                      style="font-size: 13px;">
                                      Refuser</button>
                                  </EditForm>


                                </div>
                              </td>




                            </tr>
                          }
                        }
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </main>

        </div>
      </div>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>
      <script src="script.js"></script>
    </body>
  }
}
<script>
  const hamBurger = document.querySelector(".toggle-btn");

  hamBurger.addEventListener("click", function ()
  {
    document.querySelector("#sidebar").classList.toggle("expand");
  });</script>



@code {
  private BlazorApp.Components.Model.Fournisseur fsr { get; set; }
  private List<BlazorApp.Components.Model.Fournisseur> fournisseurs { get; set; }
  private BlazorApp.Components.Model.Notification nfc { get; set; }


  protected override async Task OnInitializedAsync()
  {
    fournisseurs = await adminService.Getfsr();
  }
  public async Task Accept(BlazorApp.Components.Model.Fournisseur fournisseur)
  {
    nfc = new();
    nfc.Email = fournisseur.EmailId;
    nfc.Nfc = "Merci d'avoir rejoint notre site. ";
    nfc.Date = DateTime.Now;
    await adminService.AddMessage(nfc);
    fournisseur.IsApprouved = true;
    await adminService.Updatefsr(fournisseur);
    string retr = mailService.SendEmail(fournisseur.EmailId, "votre compte a été accepter");
    Navigation.NavigateTo("/RequestFournisseur");
  }
  public async Task Refuse(BlazorApp.Components.Model.Fournisseur fournisseur)
  {
    string retr = mailService.SendEmail(fournisseur.EmailId, "votre compte a été réfuser car il ne respect pas nos régle");
    await adminService.DelFournisseur(fournisseur);
  }
  public string getformname(string ch, int x)
  {
    return (ch + " FORM N°" + x);
  }

}